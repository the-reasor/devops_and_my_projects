# Basice and intermediate ssh usage and bug fixing.

# Normal SSH command looks like this;
ssh user@server_addr

# But more can be done.

cd ~/.ssh/

# Start by generating a ssh keypair, two of the most popular are rsa and ed25519

# The ed25519 algorythm is more resiliant than rsa but both can be quantum ready.
ssh-keygen -t ed25519 -f filename_for_key

#OR

# The rsa algorythm can be quantum ready if you make it long enough. 4096 is the length in bytes of the key.
ssh-keygen -t rsa -b 4096



# Next we need to copy the public key over to the machine we want to ssh into.
ssh-copy-id -i ~/.ssh/keyname.pub username@server_addr

# If you get errors about permissions you may need to apply these commands.
# These commands set the propper permissions to the files in the ~/.ssh directory.

cd ~
chmod -R 600 ~/.ssh/*
chmod -R 700 ~/.ssh
chmod -R 644 ~/.ssh/*.pub

# The chmod commands may need to be run as sudo if you get a permissions error.

# SSH into your new machine to check that everything is setup.
# You may have to provide your password for the ssh key if you set one and you may have to log into the server as that user.

ssh username@server_addr

# Now edit the ssh_config file on the server you SSHed into.
# This file is responsible for telling ssh how to handle connections and attempted connections.

# Create a backup first!
sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak

# Edit it.
sudo nano /etc/ssh/sshd_config

# Find settings by pressing 'CTRL' + 'W' then edit them to look like these

#####change these####

Protocol 2
# Setting this tells ssh to use the second version of the protocol.
# Modern installations of openssh use this by default but there is no harm in setting it.

Port 22
# In some enviroments it may not be possible to change the port.
# I know that for some cloud hosting solutions this is not possible. Always check to make sure this would work before changing.
# Always open another ssh session so that you have two shells at the same time so you can change anything that doesnt work.
# Dont worry, even after applying changes by restarting ssh you remain logged in in all my years of experience.
# So if you have an issue logging in on a third ssh connection you can change things back in one of the other two.
# (One for editing the settings, one for backup and one for testing the changes)

LoginGraceTime 2m # This setting determines how long you have to log in if you have "PasswordAuthentication yes" before the server terminates the connection.

ClientAliveInterval 300
# This setting checks to see if the session is active and if it has not been used in 5 minutes, logs you out.
# Be careful with this one because I think fail2ban which we will be installing next sees this as a failed login and if you get logged out too many times it may ban your IP.

PermitRootLogin no 
# Setting this to 'no' prevents users from logging in with administrative rights and means
# they will have to use 'sudo' or 'su -' or 'su - root' to use elevated privilages. This is important to turn off for several reasons.
# With this turned off there is less of a risk of someone using a computer with the ssh keys to get admin over your server.
# With this turned off there is a lower risk of someone Brute Forcing their way to admin. This setting  + "PasswordAuthentication off" complement eachother well.


PubkeyAuthentication yes  #Enabling this allows users to log in with the ssh key.

PasswordAuthentication no
# Disabling password authentication prevents people from logging in as users with the user password,
# it doesnt have anything to do with the password on the ssh key. Disabling this can help harden your machine against Brute Force attacks.

X11Forwarding no  #This is for stuff like remote viewing and you dont need it
# if you only have commandline interface (server install), moreover it is a security risk.

#####end changes #####

# Press 'CTRL' + 'S' to save then 'CTRL' + 'X' to exit

# Alternatively use my config
sudo apt install git
sudo git clone whatever_I_end_up_naming_it


# If you are unable to log in without password after editing sshd_config use the second SSH connection you made to apply these changes:
# Where 'user' is your username you intend to log in as.

chown user:user .ssh
chown user:user .ssh/authorized_keys

# Installing fail2ban!
# fail2ban is an amazing piece of software that helps to increase control over connections, not just ssh but also vnc and several others.

sudo apt install -y fail2ban sendmail
# Ideally we would use something like mailx instead of sendmail because it is a full MTA but there seems to be bugs with that.
# https://stackoverflow.com/questions/69779565/fail2ban-not-sending-emails actually this looks solved and I will update my guide with this once I test it out.

cd /etc/fail2ban

sudo cp jail.conf jail.local
# Here we copy jail.conf and rename it as jail.local,
# jail.local is prioritized over jail.conf and we use this to keep the default config clean so we can restore to it
# but also because updates to the fail2ban package may include alterations to jail.conf which could break our rules and lock us out.
# If you read the top of the file when editing you will see that it even says not to modify jail.conf there.

sudo nano jail.local



# The SSH config file, different from sshd_config, I know I think its stupid too.

# The SSH config file helps by keeping track of all our keys and all the addresses and users those keys corespond to.




